name: GitOps CI

on:
  push:
    paths:
      - 'apps/**'
      - 'clusters/**'
      - 'data/**'
      - 'flux/**'
      - 'infra/**'
      - 'k8s/**'
      - 'observability/**'
      - '**/*.sh'
      - '.github/workflows/gitops-ci.yml'
  pull_request:
    paths:
      - 'apps/**'
      - 'clusters/**'
      - 'data/**'
      - 'flux/**'
      - 'infra/**'
      - 'k8s/**'
      - 'observability/**'
      - '**/*.sh'
      - '.github/workflows/gitops-ci.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint:
    name: Static analysis (required)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: .pre-commit-config.yaml

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install pre-commit
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install pre-commit

      - name: Run ShellCheck
        run: pre-commit run --all-files shellcheck

      - name: Run yamllint
        run: pre-commit run --all-files yamllint

      - name: Run kubeconform
        run: pre-commit run --all-files kubeconform

  tests:
    name: Homelab tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run shell test suite
        run: make test

  validate:
    name: Validate GitOps Manifests
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare local bin path
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Set up Flux CLI
        uses: fluxcd/flux2/action@v2
        with:
          version: '2.2.3'

      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.3.0'

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Restore kubeconform cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/kubeconform
          key: kubeconform-${{ runner.os }}-0.6.3

      - name: Install kubeconform
        run: |
          set -euo pipefail
          KUBECONFORM_VERSION="0.6.3"
          CACHE_DIR="$HOME/.cache/kubeconform"
          CACHE_BIN="$CACHE_DIR/kubeconform-${KUBECONFORM_VERSION}"
          mkdir -p "$CACHE_DIR"
          if [ ! -x "$CACHE_BIN" ]; then
            tmpdir="$(mktemp -d)"
            curl -L "https://github.com/yannh/kubeconform/releases/download/v${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz" -o "$tmpdir/kubeconform.tar.gz"
            tar -xf "$tmpdir/kubeconform.tar.gz" -C "$tmpdir" kubeconform
            mv "$tmpdir/kubeconform" "$CACHE_BIN"
            rm -rf "$tmpdir"
          fi
          install -m 0755 "$CACHE_BIN" "$HOME/.local/bin/kubeconform"

      - name: Restore conftest cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/conftest
          key: conftest-${{ runner.os }}-0.52.1

      - name: Install Conftest
        run: |
          set -euo pipefail
          CONTFEST_VERSION="0.52.1"
          CACHE_DIR="$HOME/.cache/conftest"
          CACHE_BIN="$CACHE_DIR/conftest-${CONTFEST_VERSION}"
          mkdir -p "$CACHE_DIR"
          if [ ! -x "$CACHE_BIN" ]; then
            tmpdir="$(mktemp -d)"
            curl -L "https://github.com/open-policy-agent/conftest/releases/download/v${CONTFEST_VERSION}/conftest_${CONTFEST_VERSION}_Linux_x86_64.tar.gz" -o "$tmpdir/conftest.tar.gz"
            tar -xf "$tmpdir/conftest.tar.gz" -C "$tmpdir" conftest
            mv "$tmpdir/conftest" "$CACHE_BIN"
            rm -rf "$tmpdir"
          fi
          install -m 0755 "$CACHE_BIN" "$HOME/.local/bin/conftest"

      - name: Install Python dependencies
        run: |
          set -euo pipefail
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user pyyaml

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: gitops-ci

      - name: Install Flux CRDs in kind cluster
        run: |
          set -euo pipefail
          flux install --components-extra=image-reflector-controller,image-automation-controller --export | kubectl apply -f -
          kubectl wait --for=condition=Available --timeout=120s -n flux-system deployments --all

      - name: Render manifests with Kustomize
        run: |
          set -euo pipefail
          mkdir -p rendered-manifests/kustomize
          mapfile -t kustomizations < <(find clusters k8s -name kustomization.yaml -print | sort)
          if [ "${#kustomizations[@]}" -eq 0 ]; then
            echo "No kustomization.yaml files found"
            exit 1
          fi
          for kustomization in "${kustomizations[@]}"; do
            dir=$(dirname "$kustomization")
            rel=${dir#./}
            safe_name=$(echo "$rel" | tr '/._' '-' | tr '[:upper:]' '[:lower:]')
            echo "Building ${rel}"
            kustomize build "$dir" > "rendered-manifests/kustomize/${safe_name}.yaml"
          done

      - name: Build manifests with Flux
        run: |
          set -euo pipefail
          mkdir -p rendered-manifests/flux
          mapfile -t kustomizations < <(find clusters k8s -name kustomization.yaml -print | sort)
          if [ "${#kustomizations[@]}" -eq 0 ]; then
            echo "No kustomization.yaml files found for Flux build"
            exit 0
          fi
          for kustomization in "${kustomizations[@]}"; do
            dir=$(dirname "$kustomization")
            rel=${dir#./}
            safe_name=$(echo "$rel" | tr '/._' '-' | tr '[:upper:]' '[:lower:]')
            tmp_file=$(mktemp)
            {
              printf 'apiVersion: kustomize.toolkit.fluxcd.io/v1\n'
              printf 'kind: Kustomization\n'
              printf 'metadata:\n'
              printf '  name: %s\n' "${safe_name}"
              printf '  namespace: flux-system\n'
              printf 'spec:\n'
              printf '  interval: 10m\n'
              printf '  path: ./%s\n' "${rel}"
              printf '  prune: false\n'
              printf '  sourceRef:\n'
              printf '    kind: GitRepository\n'
              printf '    name: placeholder\n'
            } >"$tmp_file"
            echo "Flux building ${rel}"
            flux build kustomization "${safe_name}" \
              --namespace=flux-system \
              --path=. \
              --kustomization-file="$tmp_file" \
              --dry-run > "rendered-manifests/flux/${safe_name}.yaml"
            rm -f "$tmp_file"
          done

      - name: Validate manifests with kubeconform
        run: |
          set -euo pipefail
          kubeconform -strict -ignore-missing-schemas -skip CustomResourceDefinition -summary rendered-manifests/kustomize/*.yaml

      - name: Server-side dry-run validation
        run: |
          set -euo pipefail
          tmp_py=$(mktemp)
          {
            printf 'import pathlib\n'
            printf 'import subprocess\n'
            printf 'import sys\n'
            printf '\n'
            printf 'import yaml\n'
            printf '\n'
            printf "manifest_dir = pathlib.Path('rendered-manifests/kustomize')\n"
            printf 'failures = []\n'
            printf "for manifest_file in sorted(manifest_dir.glob('*.yaml')):\n"
            printf "    with manifest_file.open('r', encoding='utf-8') as fh:\n"
            printf '        docs = list(yaml.safe_load_all(fh))\n'
            printf '    for index, doc in enumerate(docs, start=1):\n'
            printf '        if not doc:\n'
            printf '            continue\n'
            printf '        payload = yaml.safe_dump(doc, sort_keys=False).encode()\n'
            printf '        proc = subprocess.run(\n'
            printf '            ["kubectl", "apply", "--dry-run=server", "-f", "-"],\n'
            printf '            input=payload,\n'
            printf '            capture_output=True,\n'
            printf '            check=False,\n'
            printf '        )\n'
            printf '        if proc.returncode != 0:\n'
            printf '            stderr = proc.stderr.decode()\n'
            printf '            if "no matches for kind" in stderr or "could not find the requested resource" in stderr:\n'
            printf '                print(f"Skipping {manifest_file} document {index}: {stderr.strip()}")\n'
            printf '                continue\n'
            printf '            print(f"kubectl dry-run failed for {manifest_file} document {index}:\\n{stderr}")\n'
            printf '            failures.append((manifest_file, index, stderr))\n'
            printf 'if failures:\n'
            printf '    sys.exit(1)\n'
          } >"$tmp_py"
          python3 "$tmp_py"
          rm -f "$tmp_py"

      - name: Helm lint
        run: |
          set -euo pipefail
          mapfile -t charts < <(find . -name Chart.yaml -print | sort)
          if [ "${#charts[@]}" -eq 0 ]; then
            echo "No Helm charts found to lint"
            exit 0
          fi
          for chart_file in "${charts[@]}"; do
            chart_dir=$(dirname "$chart_file")
            echo "Linting Helm chart ${chart_dir}"
            helm lint "$chart_dir"
          done

      - name: Policy checks with Conftest
        run: |
          set -euo pipefail
          if [ -d policy ] || [ -d policies ]; then
            conftest test rendered-manifests/kustomize
          else
            echo "No policy directory found, skipping OPA/Conftest checks"
          fi

      - name: Upload rendered manifests
        uses: actions/upload-artifact@v4
        with:
          name: rendered-manifests
          path: rendered-manifests
          if-no-files-found: error
