#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# shellcheck source=scripts/common-env.sh
source "${REPO_ROOT}/scripts/common-env.sh"

readonly EX_OK=0
readonly EX_USAGE=64
readonly EX_CONFIG=78

ENV_FILE_OVERRIDE=""
ENV_FILE_PATH=""
OUTPUT_PATH="${REPO_ROOT}/k8s/addons/metallb/ip-pool.yaml"
WRITE_FILE=true
STDOUT=false
POOL_NAME="homelab-pool"
POOL_NAMESPACE="metallb-system"

usage() {
  cat <<'USAGE'
Usage: render_metallb_pool_manifest.sh [OPTIONS]

Render the MetalLB IPAddressPool manifest using METALLB_POOL_START and
METALLB_POOL_END from the environment file.

Options:
  --env-file PATH         Load environment variables from PATH.
  --output PATH           Write the manifest to PATH (use '-' for stdout only).
  --stdout                Print the manifest to stdout.
  --pool-name NAME        Override the IPAddressPool metadata.name.
  --pool-namespace NS     Override the metadata.namespace.
  -h, --help              Show this help message.

Examples:
  # Update k8s/addons/metallb/ip-pool.yaml in-place using ./.env
  ./scripts/render_metallb_pool_manifest.sh --env-file ./.env

  # Print the manifest without touching the repository
  ./scripts/render_metallb_pool_manifest.sh --env-file ./.env --output - --stdout
USAGE
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --env-file)
      if [[ $# -lt 2 ]]; then
        log_error "--env-file requires a path argument"
        usage >&2
        exit ${EX_USAGE}
      fi
      ENV_FILE_OVERRIDE="$2"
      shift 2
      ;;
    --output)
      if [[ $# -lt 2 ]]; then
        log_error "--output requires a path argument"
        usage >&2
        exit ${EX_USAGE}
      fi
      OUTPUT_PATH="$2"
      if [[ ${OUTPUT_PATH} == '-' ]]; then
        WRITE_FILE=false
        STDOUT=true
      fi
      shift 2
      ;;
    --stdout)
      STDOUT=true
      shift
      ;;
    --pool-name)
      if [[ $# -lt 2 ]]; then
        log_error "--pool-name requires a value"
        usage >&2
        exit ${EX_USAGE}
      fi
      POOL_NAME="$2"
      shift 2
      ;;
    --pool-namespace)
      if [[ $# -lt 2 ]]; then
        log_error "--pool-namespace requires a value"
        usage >&2
        exit ${EX_USAGE}
      fi
      POOL_NAMESPACE="$2"
      shift 2
      ;;
    -h | --help)
      usage
      exit ${EX_OK}
      ;;
    *)
      log_error "Unknown option: $1"
      usage >&2
      exit ${EX_USAGE}
      ;;
    esac
  done
}

main() {
  parse_args "$@"
  if load_env "${ENV_FILE_OVERRIDE}"; then
    ENV_FILE_PATH="${HOMELAB_ENV_FILE:-${ENV_FILE_OVERRIDE:-}}"
  else
    if [[ -n ${ENV_FILE_OVERRIDE} ]]; then
      die ${EX_CONFIG} "Environment file not found: ${ENV_FILE_OVERRIDE}"
    fi
    die ${EX_CONFIG} "Unable to locate an environment file. Use --env-file to specify one."
  fi

  if [[ -z ${METALLB_POOL_START:-} || -z ${METALLB_POOL_END:-} ]]; then
    local env_source=${ENV_FILE_PATH:-environment}
    die ${EX_CONFIG} "METALLB_POOL_START and METALLB_POOL_END must be set in ${env_source}"
  fi

  local manifest
  if ! manifest=$(metallb_render_ip_pool_manifest "${POOL_NAME}" "${POOL_NAMESPACE}"); then
    die ${EX_CONFIG} "Failed to render MetalLB IPAddressPool manifest"
  fi

  if [[ ${WRITE_FILE} == true ]]; then
    local dir
    dir=$(dirname "${OUTPUT_PATH}")
    mkdir -p "${dir}"
    {
      printf '# Generated by scripts/render_metallb_pool_manifest.sh; do not edit manually.\n'
      printf '%s\n' "${manifest}"
    } >"${OUTPUT_PATH}"
    log_info "Wrote MetalLB IPAddressPool manifest to ${OUTPUT_PATH}"
  fi

  if [[ ${STDOUT} == true ]]; then
    printf '%s\n' "${manifest}"
  fi
}

main "$@"
